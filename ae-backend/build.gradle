plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.hidetake.ssh' version '2.10.1'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion"
}

run {
    systemProperty 'pf4j.pluginsDir', './plugins'
}

remotes {
    raspberry {
        host = '192.168.1.112'
        user = 'pi'
        password = 'raspberry'
    }
}

dependencies {
    //common
    implementation project(":modules:data")
    implementation project(":modules:domain")
    implementation project(":modules:actions")
    implementation project(":modules:devices")
    implementation project(":modules:conditions")
    implementation project(":modules:repository-sqldelight")
    implementation project(":modules:interop")
    implementation project(":plugin-features:lan-gateway")
    implementation project(":plugin-features:mqtt")

    //pf4j
    implementation "org.pf4j:pf4j:${pf4jVersion}"

    //jetty
    implementation "org.eclipse.jetty:jetty-http:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-io:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-security:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-server:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-util:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-servlets:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    implementation "org.eclipse.jetty:jetty-rewrite:$jettyVersion"

    //jakarta
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
    implementation 'jakarta.activation:jakarta.activation-api:2.0.1'

    //jersey + glassfish
    implementation "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
    implementation "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
    implementation "org.glassfish.jersey.media:jersey-media-sse:$jerseyVersion"
    implementation "org.glassfish.hk2:hk2-api:$hk2Version"

    //ktor
    implementation "io.ktor:ktor-client-core:$ktorVersion"
    implementation "io.ktor:ktor-client-auth:$ktorVersion"
    implementation "io.ktor:ktor-client-cio:$ktorVersion"
    implementation "io.ktor:ktor-client-gson:$ktorVersion"

    //gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    //serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.3.2"
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-cbor:1.3.2")

    //slf4j
    implementation "org.slf4j:slf4j-api:2.0.0-alpha5"
    implementation "org.slf4j:slf4j-simple:2.0.0-alpha5"

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
}

shadowJar {
    mainClassName = 'eu.automateeverything.Main'

    mergeServiceFiles {
        path = 'META-INF/extensions.idx'
    }
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = "UTF-8"
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.raspberry) {
                execute 'sudo killall -9 java || true'
                execute 'sudo rm -rf /home/pi/ae || true'
                execute 'mkdir /home/pi/ae'

                put from: "${buildDir}/libs/ae-backend-all.jar", into: '/home/pi/ae'
                put from: "${buildDir}/../plugins", into: '/home/pi/ae'
                put from: "${buildDir}/../blockly/dist", into: '/home/pi/ae'

                execute 'mv /home/pi/ae/dist/ /home/pi/ae/web/'
                execute 'echo "java -Dfile.encoding=UTF-8 -Djava.library.path=/usr/lib/jni -Duser.dir=/home/pi/ae -Dpf4j.pluginsDir=/home/pi/ae/plugins -jar /home/pi/ae/app-server-all.jar" > /home/pi/ae/run.sh'
                execute 'chmod +x /home/pi/ae/run.sh'
            }
        }
    }
}

task startDebugAgent {
    doLast {
        ssh.run {
            session(remotes.raspberry) {
                execute 'sudo screen -dm java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -Dfile.encoding=UTF-8 -Djava.library.path=/usr/lib/jni -Duser.dir=/home/pi/ae -Dpf4j.pluginsDir=/home/pi/ae/plugins -jar /home/pi/ae/app-server-all.jar'
            }
        }
    }
}

task assembleBackend(type: Copy) {
    dependsOn shadowJar
    from layout.buildDirectory.dir("libs")
    into layout.buildDirectory.dir("../../output/bin")
}